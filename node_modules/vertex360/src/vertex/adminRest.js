const decode = require('urldecode')

const parseBody = (event) => {
    if (event.body == null)
        return null

    let body = {}
    try { // this may come in as stringified json: "{\"name\":\"lebronjames\",\"email\":\"lebronjames@gmail.com\"}"
        body = JSON.parse(event.body)
    }
    catch(err){ // might be url-formatted: "name=dkwon&email=123" - this is how it comes back from a <form> field
        let parts = event.body.split('&')
        parts.forEach((keyValue, i) => {
            let keyValueParts = keyValue.split('=')
            if (keyValueParts.length == 2)
                body[keyValueParts[0]] = decode(keyValueParts[1])
        })
    }

    return body
}

const handleSchemaRequest = (restRequest, controllers) => {
    const allowedMethods = ['get', 'post']
    if (allowedMethods.indexOf(restRequest.method) == -1){
        throw new Error('Invalid HTTP method: ' + restRequest.method)
        return
    }

    const resources = []
    const keys = Object.keys(controllers)
    keys.forEach(key => {
        const controller = controllers[key]
        const ctr = new controller()
        resources.push({
            name: key,
            collectionName: ctr.collectionName(),
            schema: ctr.schema()
        })
    })

    return resources
}

const handleCollectionRequest = (restRequest, controllers) => {
    return new Promise((resolve, reject) => {
        const allowedMethods = ['get', 'post']
        if (allowedMethods.indexOf(restRequest.method) == -1){
            reject(new Error('Invalid HTTP method: ' + restRequest.method))
            return
        }

        const controller = controllers[restRequest.resource]
        if (controller == null){
            reject(new Error('invalid resource: '+restRequest.resource))
            return
        }

        const ctr = new controller()

        // check http method here:
        if (restRequest.method=='get'){
            const query = restRequest.event.queryStringParameters || {}
            ctr.get(query)
            .then(data => {
                resolve(data)
                return
            })
            .catch(err => {
                reject(err)
                return
            })
        }
        else if (restRequest.method=='post'){
            const body = parseBody(restRequest.event)
            if (body == null){
                reject(new Error('Missing request body.'))
                return
            }

            ctr.post(body)
            .then(data => {
                resolve(data)
                return
            })
            .catch(err => {
                reject(err)
                return
            })
        }
        else {
            reject(new Error('invalid HTTP method: '+restRequest.method))
        }
    })
}

const handleRecordRequest = (restRequest, controllers) => {
    const allowedMethods = ['get', 'put', 'delete']
    return new Promise((resolve, reject) => {
        if (allowedMethods.indexOf(restRequest.method) == -1){
            reject(new Error('Invalid HTTP method: ' + restRequest.method))
            return
        }

        const controller = controllers[restRequest.resource]
        if (controller == null){
            reject(new Error('invalid resource: '+restRequest.resource))
            return
        }

        const ctr = new controller()
        if (restRequest.method=='get'){
            ctr.getById(restRequest.id)
            .then(data => {
                resolve(data)
                return
            })
            .catch(err => {
                reject(err)
                return
            })
        }
        if (restRequest.method=='put'){
            const body = parseBody(restRequest.event)
            if (body==null){
                reject(new Error('Missing request body'))
                return
            }

            ctr.put(restRequest.id, body)
            .then(data => {
                resolve(data)
                return
            })
            .catch(err => {
                reject(err)
                return
            })
        }
        if (restRequest.method=='delete'){
            const entityId = restRequest.id
            ctr.delete(entityId)
            .then(data => {
                resolve({id: entityId})
                return
            })
            .catch(err => {
                reject(err)
                return
            })
        }
    })    
}

module.exports = (controllers, event) => {
    return new Promise((resolve, reject) => {
        /** "/api"
            "/api/post"
            "/api/post/123" */
        const requestPath = event.path
        const parts = requestPath.split('/')
        const pathParts = []
		const method = event.httpMethod.toLowerCase() // get, post, put, delete

        parts.forEach(entry => {
            if (entry.length>0 && entry!='/')
                pathParts.push(entry)
        })

        // invalid. must be 'api'
        if (pathParts.length==0){
            reject(new Error('invalid path. must folow /api/:resource/:id'))
            return
        }

        if (pathParts[0] != 'api'){
            reject(new Error('invalid path. must folow /api/:resource/:id'))
            return
        }

        const restRequest = {method:method, event:event}
        if (pathParts.length==1){
            restRequest['type'] = 'schema'
        }
        else if (pathParts.length==2){
            restRequest['type'] = 'collection'
            restRequest['resource'] = pathParts[1].trim().toLowerCase()				
        }
        else {
            restRequest['type'] = 'record'
            restRequest['resource'] = pathParts[1].trim().toLowerCase()
            restRequest['id'] = pathParts[2].trim() // don't lowercase this, it is case-sensitive
        }

        if (restRequest.type=='schema'){
            try {
                const resources = handleSchemaRequest(restRequest, controllers)
                resolve(resources)
                return
            }
            catch(err){
                reject(err)
                return
            }
            return
        }

        if (restRequest.type=='collection'){
            handleCollectionRequest(restRequest, controllers)
            .then(payload => {
                resolve(payload)
            })
            .catch(err => {
                reject(err)
            })

            return
        }

        if (restRequest.type=='record'){
            handleRecordRequest(restRequest, controllers)
            .then(payload => {
                resolve(payload)
            })
            .catch(err => {
                reject(err)
            })

            return
        }

        reject(new Error('Invalid Request'))
    })
}